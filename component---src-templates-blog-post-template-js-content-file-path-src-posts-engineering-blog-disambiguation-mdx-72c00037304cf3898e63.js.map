{"version":3,"file":"component---src-templates-blog-post-template-js-content-file-path-src-posts-engineering-blog-disambiguation-mdx-72c00037304cf3898e63.js","mappings":"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","sources":["webpack://maria-dot-engineer/./src/posts/engineering/blog_disambiguation.mdx","webpack://maria-dot-engineer/./src/templates/blogPostTemplate.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Footnote from '../../components/footnote';\nimport AuthorCard from \"../../components/authorCard\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"If you ask anyone what is the job of a software engineer, they will probably say \\\"write code\\\". In my experience, if I use 50% of my work week writing code, that is a lot. I think I may have achieved that a few times, and they were all in the context of hackathons. Most of the job is communicating: with your fellow engineers, the designers, management, cross-functional partners, users, etc. That is often to determine the answer to the question such as \\\"What should I be doing?\\\" or my preferred version \\\"What is the problem I am trying to solve?\\\". Because once I have a problem I can think of a few solutions and then start coding them.\"), \"\\n\", React.createElement(_components.p, null, \"In software engineering the solutions we are expected to provide are code. And code tends to not leave much space for ambiguity. In fact, computers are extremely good at unambiguously doing exactly what the code tells them to do\", React.createElement(Footnote, {\n    presentation: \"1\"\n  }, \"Much to the chagrin to software engineers like me, who need mnemonics for left and right, and would argue the computer should have been able to tell that when I said right, I meant my other right.\"), \". Because if you look closely, what computers ultimately are, is just a set of tightly packed deterministic processes that we run on deterministic data. But Computers don’t do well with ambiguity. The more closely you look the less ambiguous the computers need the instructions to be, up to the point where they end up being a series of ANDs, ORs, NOTs, etc… And ultimately, as software engineers, what we do is being able to translate an ambiguous task into these extremely clear instructions\"), \"\\n\", React.createElement(_components.h2, null, \"A History of Software Engineering\"), \"\\n\", React.createElement(_components.p, null, \"To start off let's have a quick look at the history of software engineering, as presented by me, a non-historian, trying to make a point\", React.createElement(Footnote, {\n    presentation: \"2\"\n  }, \" If you want a less biased version I am sure \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/History_of_software_engineering\",\n    target: \"_blank\"\n  }, \"Wikipedia\"), \" can provide you with a slightly more detailed and significantly less biased portrayal of said history.\"), \". While computers have evolved significantly since their inception, with things getting smaller, more efficient, and more powerful, the base units have remained more or less the same, excluding ongoing research on quantum computing. Simplified: We have a series of 1s and 0s (bits)\", React.createElement(Footnote, {\n    presentation: \"3\"\n  }, \"Which is if we start things a bit later (pun intended). Technically if we consider the first computer to be the \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Bombe\",\n    target: \"_blank\"\n  }, \"Bombe\"), \" inputs were not bits, but letters which were set on mechanical gears.\"), \" going through circuitry connected by gates that do logical operations like and, not, or, etc... and return the result. These gates can then be combined to do specific operations like addition. And all of these circuits are combined to an instruction set that the programmer can then use, usually through a low level language like \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Assembly_language\",\n    target: \"_blank\"\n  }, \"Assembly\"), \", to tell the computer to what you wanted it to do. People used to write code a lot of code in Assembly\", React.createElement(Footnote, {\n    presentation: \"4\"\n  }, \"You know the famous Apollo mission \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Apollo_Guidance_Computer#/media/File:Margaret_Hamilton_-_restoration.jpg\",\n    target: \"_blank\"\n  }, \"photo\"), \" of Margaret Hamilton? Those were a lot of instructions.\"), \", but it's a much rarer now. Most Software Engineers nowadays do not need to even know what Assembly looks like\", React.createElement(Footnote, {\n    presentation: \"5\"\n  }, \"Though some may try to write entire games, like \", React.createElement(\"a\", {\n    href: \"https://www.reddit.com/r/programming/comments/4pphk3/i_made_this_512_byte_snake_game_in_pure_assembly/\",\n    target: \"_blank\"\n  }, \"Snake\"), \", in Assembly as a form of either scientific self-flagellation or ostentatious peacocking.\"), \". Later on compilers came along that made it possible to write slightly more human-readable instructions\", React.createElement(Footnote, {\n    presentation: \"6\"\n  }, \"If one can call FORTRAN or Lisp readable.\"), \", that were then translated to machine instructions. The compilers became more advanced, and with them the capabilities of the languages improved in what you could express through them. Just like a child gathers more vocabulary.\"), \"\\n\", React.createElement(_components.p, null, \"Nowadays, we have more specialised languages like Rust, JavaScript and Python, each with its own sets of strengths and weaknesses. A lot of algorithms have been abstracted away as well in common libraries we need only use. So new engineers learn more and more how to communicate in these new frameworks that the languages provide.\"), \"\\n\", React.createElement(_components.h2, null, \"Speculations on the future of Software Engineering\"), \"\\n\", React.createElement(_components.p, null, \"The big topic in the technology space nowadays is LLMs. With \", React.createElement(\"a\", {\n    href: \"https://github.com/features/copilot\",\n    target: \"_blank\"\n  }, \"Github's Copilot\"), \" there is increasing speculation about AI making the job of Software Engineers obsolete. Personally I would not be too concerned. With the use of similar technologies, auto-completes in IDEs have been getting more and more useful. When autocomplete appeared, automatically filling in the name of the functions no engineer lost their job. We were just no longer expecting the engineers to remember the name of the functions, their arguments, and most importantly which order they go in. With the usage of the mysterious AI, the auto-complete instead of auto-completing \", React.createElement(_components.code, null, \"ca\"), \" to \", React.createElement(_components.code, null, \"catch\"), \" it will catch the error, and throw it back out, because that's mostly what we do anyway.\"), \"\\n\", React.createElement(_components.p, null, \"In the state they are nowadays, I am not too worried about LLMs magically being able to start being able to write code. But let's assume that LLMs became advanced enough that they are able to create correct code\", React.createElement(Footnote, {\n    presentation: \"7\"\n  }, \"And not the most statistically likely correct code.\"), \" based on what you told them. What you then have: is just another compiler. Then instead of using JavaScript as a language in which the engineer communicates to the computer, they use spoken English, that the LLM translates to JavaScript that then gets translated to Machine Instructions, eventually. But, as we are already seeing in the increase of talks about prompt engineering as a buzzword and study, that English we will use to \\\"speak\\\" to the LLM is likely not going to be the same as we use when speaking with each other, at least if we want to get the desired results. And at this point will it not be just another programming language?\"), \"\\n\", React.createElement(_components.h2, null, \"Software Engineers as Computer Disambiguators\"), \"\\n\", React.createElement(_components.p, null, \"In the business world companies tend to want to make money, so ultimately that is the problem they are trying to solve. How they go about it is solutions. The bigger the company the more it can do to achieve that goal. But because there are so many people doing different things, it may not be entirely clear to the software engineer who is writing up the animation for the like button on Facebook, on how that has anything to do with making the company more money. And the important thing is, they don't really need to. Their skill is to be able to tell the computer which pixels on the monitor to light up blue.\"), \"\\n\", React.createElement(_components.p, null, \"But this engineer themselves got their instructions from someone who probably told them to \\\"make the like button more fun to click\\\". They themselves probably got instructions from someone else that \\\"we want to drive up engagement on posts\\\", who probably got instructions from someone who said \\\"we want people to interact with more posts\\\", who got the prompt that \\\"we want people to see more ads\\\", which ultimately came from the original problem statement of \\\"we want more money.\\\" Each iteration clarifies the problem further until there is one single set of instructions, the code, but the disambiguation does not stop there, once the engineer writes the code, the compiler translates it to a set of instructions that get sent to the processor, and then there are a lot of electrons firing in circuits. If you were to just look at the electrons firing it may take you a while to tell that it's just doing a thumbs up animation.\"), \"\\n\", React.createElement(_components.p, null, \"At every level, each person removes one layer of ambiguity up to the point where it's just LEDs lighting up on a screen, in the right way. But if you go to a computer and just tell it what you want it will probably sit there silently and not do it. You can't expect it to understand you and magically do what you intended it to do. Similarly, if you were to go to the Engineer who was doing the thumbs up animation and present them with the problem, they would probably shrug their shoulders and probably not very successfully try to do it, if they try at all. Ultimately this also falls under my belief about one of the biggest and most important differences between a senior and a junior engineer, and that is how much ambiguity are they able to remove.\"), \"\\n\", React.createElement(_components.h2, null, \"Conclusions\"), \"\\n\", React.createElement(_components.p, null, \"Computers get their instructions from the software engineer, who get their instructions from their seniors, who get their instructions from their managers, who get their instructions from their customers (in a very simplified communication model). As instructions don’t come bottom up, but from the top of the communication funnel, every layer has to sift out ambiguity to create a more and more concrete set of instructions for the lower levels up to the point where we have the computer doing the thing we want it to do. Once we've done that we probably need to clearly communicate it back up, and the cycle begins again.\"), \"\\n\", React.createElement(AuthorCard), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, React.createElement(\"sup\", null, \"1\"), \" Much to the chagrin to software engineers like me, who need mnemonics for left and right, and would argue the computer should have been able to tell that when I said right, I meant my other right.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"sup\", null, \"2\"), \" If you want a less biased version I am sure \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/History_of_software_engineering\",\n    target: \"_blank\"\n  }, \"Wikipedia\"), \" can provide you with a slightly more detailed and significantly less biased portrayal of said history.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"sup\", null, \"3\"), \" Which is if we start things a bit later (pun intended). Technically if we consider the first computer to be the \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Bombe\",\n    target: \"_blank\"\n  }, \"Bombe\"), \" inputs were not bits, but letters which were set on mechanical gears.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"sup\", null, \"4\"), \" You know the famous Apollo mission \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Apollo_Guidance_Computer#/media/File:Margaret_Hamilton_-_restoration.jpg\",\n    target: \"_blank\"\n  }, \"photo\"), \" of Margaret Hamilton? Those were a lot of instructions.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"sup\", null, \"5\"), \" Though some may try to write entire games, like \", React.createElement(\"a\", {\n    href: \"https://www.reddit.com/r/programming/comments/4pphk3/i_made_this_512_byte_snake_game_in_pure_assembly/\",\n    target: \"_blank\"\n  }, \"Snake\"), \", in Assembly as a form of either scientific self-flagellation or ostentatious peacocking.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"sup\", null, \"6\"), \" If one can call FORTRAN or Lisp readable.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"sup\", null, \"7\"), \" And not the most statistically likely correct code.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/mariamateescu/maria-engineer.github.io/src/posts/engineering/blog_disambiguation.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport styled from \"@emotion/styled\";\nconst Title = (styled.h1)`\n  font-size: 3rem;\n  @media (max-width: 420px) {\n    min-font-size: 24px;\n  }\n  font-family: \"Poppins\", \"Arial Narrow\", sans-serif;\n  text-rendering: optimizelegibility;\n  font-weight: 400;\n  text-align: left;\n  color: #38f;\n`;\nconst Navigation = (styled.div)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 1rem;\n  padding-left: 2rem;\n  padding-right: 2rem;\n`;\nconst Post = (styled.div)`\n  padding: 10px 60px 10px 60px;\n  @media (max-width: 420px) {\n    padding: 10px 10px 10px 10px;\n  }\n  font-family: \"Poppins\", \"Arial Narrow\", sans-serif;\n  text-rendering: optimizelegibility;\n  font-weight: 200;\n  font-style: normal;\n`;\nconst Bar = (styled.div)`\n  margin: 5px auto 20px auto;\n  height: 10px;\n  background: #38f;\n  border-right: 18px solid #8bf;\n  border-left: 18px solid #8bf;\n  border-radius: 9px;\n  padding: 0 5px;\n  width: 60%;\n`;\nfunction Template({data, children}) {\n  const {mdx} = data;\n  const {frontmatter} = mdx;\n  if (frontmatter.category === \"food\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Food\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title,\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(Post, null, React.createElement(Title, null, frontmatter.title), React.createElement(MDXProvider, null, children)));\n  }\n  if (frontmatter.category === \"theatre\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Theatre Reviews\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title + \" - Review\",\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(Post, null, React.createElement(Title, null, frontmatter.title), React.createElement(MDXProvider, null, children)), React.createElement(\"div\", {\n      className: \"footer go-center\"\n    }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(Bar)));\n  }\n  return React.createElement(Layout, {\n    currentPage: \"Maria Mateescu\",\n    currentSubPage: frontmatter.category === \"personal\" ? \"Personal Log\" : \"Engineering Log\"\n  }, React.createElement(SEO, {\n    title: frontmatter.title,\n    keywords: frontmatter.keywords,\n    description: frontmatter.description\n  }), React.createElement(Post, null, React.createElement(Title, null, frontmatter.title), React.createElement(MDXProvider, null, children)), React.createElement(Navigation, null, frontmatter.prev ? React.createElement(\"a\", {\n    \"aria-label\": \"Previous post\",\n    key: \"back\",\n    disabled: !frontmatter.prev,\n    href: frontmatter.prev\n  }, \"< Prev\") : React.createElement(\"div\"), frontmatter.next ? React.createElement(\"a\", {\n    \"aria-label\": \"Next post.\",\n    key: \"next\",\n    href: frontmatter.next\n  }, \"Next >\") : React.createElement(\"div\")), React.createElement(\"div\", {\n    className: \"footer go-center\"\n  }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(Bar)));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Template, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        short\n        category\n        description\n        keywords\n        prev\n        next\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","code","hr","_provideComponents","components","React","Footnote","presentation","href","target","AuthorCard","wrapper","MDXLayout","Title","_styled","name","styles","Navigation","Post","Bar","Template","_ref","data","children","mdx","frontmatter","category","Layout","currentPage","currentSubPage","SEO","title","keywords","description","MDXProvider","className","date","prev","key","disabled","next","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}