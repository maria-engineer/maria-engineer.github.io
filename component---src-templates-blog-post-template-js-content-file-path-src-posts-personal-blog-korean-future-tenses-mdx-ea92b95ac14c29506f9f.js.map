{"version":3,"file":"component---src-templates-blog-post-template-js-content-file-path-src-posts-personal-blog-korean-future-tenses-mdx-ea92b95ac14c29506f9f.js","mappings":"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","sources":["webpack://maria-dot-engineer/./src/posts/personal/blog_korean_future_tenses.mdx","webpack://maria-dot-engineer/./src/templates/blogPostTemplate.js","webpack://maria-dot-engineer/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I wanted to enthuse a little about a new piece of grammar I have learned in Korean the other day. Apparently there are two different ways to do future in Korean, that in English are basically just \\\"will VERB\\\". (Note: these are not the only ways. For example there's also -려고 해요/-려고요 that is an intent for the future, with no specific plan.)\"), \"\\n\", React.createElement(_components.p, null, \"The difference between these two different ways of expressing the future are as follows.\"), \"\\n\", React.createElement(_components.h3, null, \"-ㄹ 거예요\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"This is a plan that is made and is going to happen.\"), \"\\n\", React.createElement(_components.li, null, \"It will have happened regardless of this conversation.\"), \"\\n\", React.createElement(_components.li, null, \"You have no input on this plan, and it's not going to change.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"-ㄹ께요\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"I have just made this plan as a result of this conversation OR\"), \"\\n\", React.createElement(_components.li, null, \"I may change this plan based on the outcome of this conversation.\"), \"\\n\", React.createElement(_components.li, null, \"Do share your input on my plans;\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Think of how we would do this in English. You just use I will and the plan. With little indication if you're just informing the person or expecting some input. We may often add \\\"if that's ok with you\\\" or \\\"what do you think\\\" for the latter, but based on my experience, it's more often an expectant look or silence, where we wait for the other person's input.\"), \"\\n\", React.createElement(_components.p, null, \"From a communication perspective I find this brilliant. I don't know how common this is in actual language usage, but the fact that there is a grammatical difference here I find fascinating. THIS is why I love learning (about) languages! The one thing that confuses me is that this far I have found so much nuance in grammar alone, while learning Korean, yet why do we consider this a high context language?\"), \"\\n\", React.createElement(_components.p, null, \"My favourite example in the textbook for this was if your superior at work tells you to do something replying with 할 거예요 is considered rude because it has the meaning \\\"I was doing it anyway.\\\". But sometimes one really wants to be exactly this rude, in this exact way. Like when they interrupted you to ask you a question that you were going to answer in the second half of the sentence anyway. Or you were already working on a solution, know what you are doing and didn't really need their input... In English the options to convey this meaning are just so limited. Maybe a sigh, or with an additional snarky \\\"As I was saying before you interrupted\\\". But this is either not clear enough in your meaning, or wastes precious time, that they already wasted with their question. To have the option in the grammar, one syllable away, is just beautiful.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/mariamateescu/maria-engineer.github.io/src/posts/personal/blog_korean_future_tenses.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport styled from \"@emotion/styled\";\nconst Title = (styled.h1)`\n  text-align: right important!;\n`;\nfunction Template({data, children}) {\n  const {mdx} = data;\n  const {frontmatter} = mdx;\n  if (frontmatter.category === \"food\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Food\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title,\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(\"div\", {\n      className: \" content\"\n    }, React.createElement(Title, null, frontmatter.title), children));\n  }\n  if (frontmatter.category === \"theatre\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Theatre Reviews\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title + \" - Theatre Review\",\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(\"div\", {\n      className: \"content\"\n    }, React.createElement(\"h1\", null, frontmatter.title), children), React.createElement(\"footer\", {\n      className: \"footer go-center\"\n    }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(\"div\", {\n      className: \"lcars-bar-slice-bottom\"\n    })));\n  }\n  return React.createElement(Layout, {\n    currentPage: \"Maria Mateescu\",\n    currentSubPage: frontmatter.category === \"personal\" ? \"Personal Log\" : \"Engineering Log\"\n  }, React.createElement(SEO, {\n    title: frontmatter.title,\n    keywords: frontmatter.keywords,\n    description: frontmatter.description\n  }), React.createElement(\"div\", {\n    className: \"content\"\n  }, React.createElement(\"h1\", null, frontmatter.title), React.createElement(MDXProvider, null, children)), React.createElement(\"footer\", {\n    className: \"footer go-center\"\n  }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(\"div\", {\n    className: \"lcars-bar-slice-bottom\"\n  })));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Template, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        short\n        category\n        description\n        keywords\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h3","ul","li","_provideComponents","components","React","wrapper","MDXLayout","Title","_styled","target","name","styles","Template","_ref","data","children","mdx","frontmatter","category","Layout","currentPage","currentSubPage","SEO","title","keywords","description","className","date","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}