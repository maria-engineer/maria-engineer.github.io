{"version":3,"file":"component---src-templates-blog-post-template-js-content-file-path-src-posts-engineering-blog-monorepos-mdx-5208873305fecd0d5e6e.js","mappings":"4MAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,iTAAkT,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mJAAoJ,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,uBAAwB,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4LAA6L,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,qDAAsD,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,sSAAuS,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,+CAAgD,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,yMAA0M,KAAMK,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,6BAA8B,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8pBAA+pB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2SAA4S,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oZAAqZ,KAAMK,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,sCAAuC,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,+MAAgN,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,unBAAwnB,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,qhBAAshB,KAAMK,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,yBAA0B,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,siCAAuiC,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,4PAA6P,KAAMK,EAAAA,cAAoBR,EAAYI,GAAI,KAAM,cAAe,KAAMI,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,6JACj1M,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,E,kBCPA,MAAMY,GAAKC,EAAAA,EAAAA,GAAA,MAAAC,OAAA,aAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,8LAWLC,GAAIJ,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,2MAUJE,GAAGL,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAE,KAAA,UAAAC,OAAA,6JAUT,SAASG,EAAQC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EAChC,MAAM,IAACG,GAAOF,GACR,YAACG,GAAeD,EACtB,MAA6B,SAAzBC,EAAYC,SACPhB,EAAAA,cAAoBiB,EAAAA,EAAQ,CACjCC,YAAa,YACbC,eAAgB,QACfnB,EAAAA,cAAoBoB,EAAAA,EAAK,CAC1BC,MAAON,EAAYM,MACnBC,SAAUP,EAAYO,SACtBC,YAAaR,EAAYQ,cACvBvB,EAAAA,cAAoBQ,EAAM,KAAMR,EAAAA,cAAoBG,EAAO,KAAMY,EAAYM,OAAQrB,EAAAA,cAAoBwB,EAAAA,GAAa,KAAMX,KAErG,YAAzBE,EAAYC,SACPhB,EAAAA,cAAoBiB,EAAAA,EAAQ,CACjCC,YAAa,YACbC,eAAgB,mBACfnB,EAAAA,cAAoBoB,EAAAA,EAAK,CAC1BC,MAAON,EAAYM,MAAQ,YAC3BC,SAAUP,EAAYO,SACtBC,YAAaR,EAAYQ,cACvBvB,EAAAA,cAAoBQ,EAAM,KAAMR,EAAAA,cAAoBG,EAAO,KAAMY,EAAYM,OAAQrB,EAAAA,cAAoBwB,EAAAA,GAAa,KAAMX,IAAYb,EAAAA,cAAoB,MAAO,CACrKyB,UAAW,oBACVzB,EAAAA,cAAoB,MAAO,KAAM,MAAOe,EAAYW,KAAM,OAAQ1B,EAAAA,cAAoBS,KAEpFT,EAAAA,cAAoBiB,EAAAA,EAAQ,CACjCC,YAAa,iBACbC,eAAyC,aAAzBJ,EAAYC,SAA0B,eAAiB,mBACtEhB,EAAAA,cAAoBoB,EAAAA,EAAK,CAC1BC,MAAON,EAAYM,MACnBC,SAAUP,EAAYO,SACtBC,YAAaR,EAAYQ,cACvBvB,EAAAA,cAAoBQ,EAAM,KAAMR,EAAAA,cAAoBG,EAAO,KAAMY,EAAYM,OAAQrB,EAAAA,cAAoBwB,EAAAA,GAAa,KAAMX,IAAYb,EAAAA,cAAoB,MAAO,CACrKyB,UAAW,oBACVzB,EAAAA,cAAoB,MAAO,KAAM,MAAOe,EAAYW,KAAM,OAAQ1B,EAAAA,cAAoBS,IAC3F,CACe,SAASkB,EAAiBpC,GACvC,OAAOS,EAAAA,cAAoBU,EAAUnB,EAAOS,EAAAA,cAAoB4B,EAAqBrC,GACvF,C,8FC3CO,MAAMsC,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiB/B,GAC/B,MAAMgC,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAf9B,EACFA,EAAWgC,GAGb,IAAIA,KAAsBhC,IAChC,CAACgC,EAAmBhC,GACzB,CAGA,MAAMiC,EAAc,CAAC,EAQd,SAASR,GAAY,WAACzB,EAAU,SAAEc,EAAQ,qBAAEoB,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAflC,EACHA,EAAW,CAAC,GACZA,GAAciC,EAEJF,EAAiB/B,GAG5B,gBACL8B,EAAWM,SACX,CAACC,MAAOF,GACRrB,EAEJ,C","sources":["webpack://maria-dot-engineer/./src/posts/engineering/blog_monorepos.mdx","webpack://maria-dot-engineer/./src/templates/blogPostTemplate.js","webpack://maria-dot-engineer/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I love monorepos. I love monorepos so much, there is no way this is going to be a balanced blog post. If you want a non-biased opinion piece on monorepos vs. multiple-repo developer experience, this is not it. This is an ode about why I think monorepos are amazing and why more people should use them.\"), \"\\n\", React.createElement(_components.p, null, \"I am not alone in this opinion, Google is famous for its one great monorepo, google3. And Meta loves monorepos so much it has multiple of them.\"), \"\\n\", React.createElement(_components.h2, null, \"What is a monorepo?\"), \"\\n\", React.createElement(_components.p, null, \"There's nothing too special about a monorepo. It's just a regular repository in source control, the only big difference is that everything you work on is in one single such repository.\"), \"\\n\", React.createElement(_components.h2, null, \"Won't my code be a mess if it's all in one place?\"), \"\\n\", React.createElement(_components.p, null, \"Well, that is entirely up to you. In a monorepo we usually use folder structures to keep our code clean and tidy. I suppose it is possible to create confusing folder structures and litter code everywhere that is used in the most confusing places. But that's an issue in small repos as well.\"), \"\\n\", React.createElement(_components.h2, null, \"Ok, so tell me what's so cool about them...\"), \"\\n\", React.createElement(_components.p, null, \"They are genuinely a joy to work in. They make cleaning up tech debt and encourage better engineering. Ok, that may be an over-exaggeration, but they certainly help make the cleanups less daunting.\"), \"\\n\", React.createElement(_components.h3, null, \"Monorepos and Refactoring\"), \"\\n\", React.createElement(_components.p, null, \"Refactoring can come from a lot of places of need. It can be changes in business needs, it can be newly discovered security vulnerabilities, or just the plain old tech debt that is finally calling in to be paid. Having everything that could possibly call into your code into one place makes it a lot easier to check all your bases. With the evolution of static code analysis, we now can find those references with greater ease. This enables us to make the safe decisions when tackling that code debt. And the beauty of it is, in one repo, we often can make all this in 1 single pull request (sometimes 2, for push safety reasons, with the second being the clean-up).\"), \"\\n\", React.createElement(_components.p, null, \"Sure, nowadays, there are tools like SourceGraph that have made it easier to track this across repos, but there's a high chance that if I am making that change, I will not have all the repos that use my code checked out on my machine. And managing all those changes will be quite time-consuming.\"), \"\\n\", React.createElement(_components.p, null, \"Mind you it is not only writing of the changes that becomes easier. But think of the reviewers. When reviewing one big PR that refactors everything in the exact same way, as a reviewer I can look at the code once, to determine its validity, and then verify that it is the same across all different use-cases. I have all the context I need in one single PR, instead of having to chase the information.\"), \"\\n\", React.createElement(_components.h3, null, \"Monorepos and Developing New Stuff\"), \"\\n\", React.createElement(_components.p, null, \"But then maintaining old code is not the only responsibility of an engineer. Writing new code and developing new features is also important. Well hold your horses because monorepos also make this easier.\"), \"\\n\", React.createElement(_components.p, null, \"My biggest pet peeve in software development, and what I consider to be the biggest waste of time, is reinventing the wheel. Most engineers nowadays do not work at the bleeding edge of technological discovery, what that means is that what they're trying to do has probably been done before. Maybe in a different way, but the building blocks are already there to be placed into a different shape that suits the new needs. When all these building blocks are scattered across many repos, some old and forgotten, it is difficult to find them. This leads to \\\"needing\\\" to reinvent the wheel every time. And that's not an easy feat.\"), \"\\n\", React.createElement(_components.p, null, \"With monorepos finding the wheels that have already been invented, tried, tested, and gone through multiple improvement iterations becomes easier. The developer does less work because they can reuse the work others have done before them, the reviewer does less work because they probably can assume that what is already there works (true, there may be fallacies to this), and future maintainers of the project will have an easier time understanding as well as keeping the code up to date, as it's standardised across the company.\"), \"\\n\", React.createElement(_components.h3, null, \"Monorepos and Culture\"), \"\\n\", React.createElement(_components.p, null, \"There is the question of which came first the culture or the technology. But a monorepo is closely linked with a culture of openness within the company. The fact that all developers can check out and read the entire repo, means all developers get to see and learn from all that their colleagues have done in the past. Which has countless benefits. But above all it fosters a culture of being able to fix things across the company. Sometimes there are small fixes that can be done in multiple places than just the small corner of the world of one's singular project, and the company benefits from them being propagated across the entire repository. Facebook had this famous motto of \\\"Nothing at Facebook is somebody else's problem.\\\" which I believe is one of the attitudes that allowed Facebook to become so successful and iterate so quickly. It encourages a culture of inclusion and acceptance of ideas from wherever they may come from. Thus, it creates a feeling of empowerment in its engineers. And this empowerment comes with dedication to the problems.\"), \"\\n\", React.createElement(_components.p, null, \"I've been in places where monorepos were not used. And the developer experience was still good. However, the culture was consistently not as open. They did not encourage cross team collaboration, and it was difficult to achieve things across teams.\"), \"\\n\", React.createElement(_components.h2, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Perhaps I may be giving monorepos too much credit. Are they needed for a company to function? No. But they certainly make it a nicer company to work for.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/mariamateescu/maria-engineer.github.io/src/posts/engineering/blog_monorepos.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport styled from \"@emotion/styled\";\nconst Title = (styled.h1)`\n  font-size: 3rem;\n  @media (max-width: 420px) {\n    min-font-size: 24px;\n  }\n  font-family: \"Poppins\", \"Arial Narrow\", sans-serif;\n  text-rendering: optimizelegibility;\n  font-weight: 400;\n  text-align: left;\n  color: #38f;\n`;\nconst Post = (styled.div)`\n  padding: 10px 60px 10px 60px;\n  @media (max-width: 420px) {\n    padding: 10px 10px 10px 10px;\n  }\n  font-family: \"Poppins\", \"Arial Narrow\", sans-serif;\n  text-rendering: optimizelegibility;\n  font-weight: 200;\n  font-style: normal;\n`;\nconst Bar = (styled.div)`\n  margin: 5px auto 20px auto;\n  height: 10px;\n  background: #38f;\n  border-right: 18px solid #8bf;\n  border-left: 18px solid #8bf;\n  border-radius: 9px;\n  padding: 0 5px;\n  width: 60%;\n`;\nfunction Template({data, children}) {\n  const {mdx} = data;\n  const {frontmatter} = mdx;\n  if (frontmatter.category === \"food\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Food\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title,\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(Post, null, React.createElement(Title, null, frontmatter.title), React.createElement(MDXProvider, null, children)));\n  }\n  if (frontmatter.category === \"theatre\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Theatre Reviews\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title + \" - Review\",\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(Post, null, React.createElement(Title, null, frontmatter.title), React.createElement(MDXProvider, null, children)), React.createElement(\"div\", {\n      className: \"footer go-center\"\n    }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(Bar)));\n  }\n  return React.createElement(Layout, {\n    currentPage: \"Maria Mateescu\",\n    currentSubPage: frontmatter.category === \"personal\" ? \"Personal Log\" : \"Engineering Log\"\n  }, React.createElement(SEO, {\n    title: frontmatter.title,\n    keywords: frontmatter.keywords,\n    description: frontmatter.description\n  }), React.createElement(Post, null, React.createElement(Title, null, frontmatter.title), React.createElement(MDXProvider, null, children)), React.createElement(\"div\", {\n    className: \"footer go-center\"\n  }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(Bar)));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Template, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        short\n        category\n        description\n        keywords\n        prev\n        next\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","h3","_provideComponents","components","React","wrapper","MDXLayout","Title","_styled","target","name","styles","Post","Bar","Template","_ref","data","children","mdx","frontmatter","category","Layout","currentPage","currentSubPage","SEO","title","keywords","description","MDXProvider","className","date","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}