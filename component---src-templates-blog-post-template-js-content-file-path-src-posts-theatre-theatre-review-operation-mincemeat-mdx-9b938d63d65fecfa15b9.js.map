{"version":3,"file":"component---src-templates-blog-post-template-js-content-file-path-src-posts-theatre-theatre-review-operation-mincemeat-mdx-9b938d63d65fecfa15b9.js","mappings":"kMAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,MACFC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,oRAAqR,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,mTAAoT,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,uhBAAwhB,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,4NAA6N,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,2hBAA4hB,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,4IAA6I,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,wWAAyW,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAMI,EAAAA,cAAoBP,EAAYI,EAAG,CACpxFI,KAAM,sCACL,sCACL,CAKA,MAJA,SAAoBT,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWX,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCVA,SAASY,EAAQC,GAAmB,IAAlB,KAACC,EAAI,SAAEC,GAASF,EAChC,MAAM,IAACG,GAAOF,GACR,YAACG,EAAW,MAAEC,GAASF,EAC7B,OAAOR,EAAAA,cAAoBW,EAAAA,EAAQ,CACjCC,YAAa,iBACbC,eAAyC,aAAzBJ,EAAYK,SAA0B,eAAiB,mBACtEd,EAAAA,cAAoBe,EAAAA,EAAK,CAC1BC,MAAOP,EAAYO,MACnBC,SAAUR,EAAYQ,SACtBC,YAAaT,EAAYS,cACvBlB,EAAAA,cAAoB,MAAO,CAC7BmB,UAAW,+BACVnB,EAAAA,cAAoB,MAAO,CAC5BmB,UAAW,aACVnB,EAAAA,cAAoB,KAAM,KAAMS,EAAYO,OAAQT,IAAYP,EAAAA,cAAoB,SAAU,CAC/FmB,UAAW,oBACVnB,EAAAA,cAAoB,MAAO,KAAM,MAAOS,EAAYW,KAAM,OAAQpB,EAAAA,cAAoB,MAAO,CAC9FmB,UAAW,4BAEf,CACe,SAASE,EAAiB7B,GACvC,OAAOQ,EAAAA,cAAoBI,EAAUZ,EAAOQ,EAAAA,cAAoBsB,EAAqB9B,GACvF,C,sECMO,MAAM+B,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBzB,GAC/B,MAAM0B,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfxB,EACFA,EAAW0B,GAGb,IAAIA,KAAsB1B,IAChC,CAAC0B,EAAmB1B,GACzB,C","sources":["webpack://maria-dot-engineer/./src/posts/theatre/theatre_review_operation_mincemeat.mdx","webpack://maria-dot-engineer/./src/templates/blogPostTemplate.js","webpack://maria-dot-engineer/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"This is a really good show - incredibly fun and fresh. Did I mention hilarious? I can't bring myself to go for a full 5 star rating as it was missing something from being great. If I were to guess, the thing it was missing was what in design/drawing is called White Space.\"), \"\\n\", React.createElement(_components.p, null, \"The music was quite good. It was catchy and fun. For the most part, it was reminiscent of classic musicals. The one piece that stood out among them all was the Nazi number. It had no right to be the best part. Huge shout out to Jak Malone (playing Hester and others) and their absolutely gorgeous voice.\"), \"\\n\", React.createElement(_components.p, null, \"The story, in itself, is absolutely hilarious. I didn't really get it from the basic plotline. Yeah, sure, they got a corpse. Until it was clearly pointed out, how does one even get a corpse? Shenanigans from the beginning to the end. They managed to put on the play with a very small cast, playing all genders. (I love seeing this in theatre.) The ladies who slayed the most were Jak Malone's Hester and David Cumming's secretary. And the men who killed it were Natasha Hodgson's Montagu and Zoe Roberts's Haselden, if you ask me.\"), \"\\n\", React.createElement(_components.p, null, \"The final homage to Glyndwr Michael, the real-life corpse who was the key to the success of the entire operation, was really touching and extremely well done. I think that would have been a good spot to end the show.\"), \"\\n\", React.createElement(_components.p, null, \"While throughout the play the performance was solid, though I would have liked a bit more pause to be able to get the next joke over the laughter, the ending is what puts this in the solid 4 category for me. The ending goes for the classic panto/light entertainment wrap-up, and in the final song about female empowerment, they end up matching Hester up with the Admiral. Not only does that retract from Hester's touching Tom song, but as there is no buildup of the relationship, it also reduces the women's independence song in power.\"), \"\\n\", React.createElement(_components.p, null, \"Even so, while it is not perfect, I would still strongly recommend it to anyone. I think it is one step away from being a great musical.\"), \"\\n\", React.createElement(_components.p, null, \"Final appreciations: I would like to give a big round of applause for pretty much stealing the Google search results for \\\"Does a newt have an anus?\\\" Well played. However, I was very disappointed to find out afterward that newts do not, in fact, have anuses. If you want to know what I'm going on about, I guess you'll have to get tickets to see the show.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.operationmincemeat.com\"\n  }, \"Tickets are still available here.\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/mariamateescu/maria-engineer.github.io/src/posts/theatre/theatre_review_operation_mincemeat.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nfunction Template({data, children}) {\n  const {mdx} = data;\n  const {frontmatter, _body} = mdx;\n  return React.createElement(Layout, {\n    currentPage: \"Maria Mateescu\",\n    currentSubPage: frontmatter.category === \"personal\" ? \"Personal Log\" : \"Engineering Log\"\n  }, React.createElement(SEO, {\n    title: frontmatter.title,\n    keywords: frontmatter.keywords,\n    description: frontmatter.description\n  }), React.createElement(\"div\", {\n    className: \"blog-post-container content\"\n  }, React.createElement(\"div\", {\n    className: \"blog-post\"\n  }, React.createElement(\"h1\", null, frontmatter.title), children)), React.createElement(\"footer\", {\n    className: \"footer go-center\"\n  }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(\"div\", {\n    className: \"lcars-bar-slice-bottom\"\n  })));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Template, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      body\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        short\n        category\n        description\n        keywords\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","_provideComponents","components","React","href","wrapper","MDXLayout","Template","_ref","data","children","mdx","frontmatter","_body","Layout","currentPage","currentSubPage","category","SEO","title","keywords","description","className","date","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}