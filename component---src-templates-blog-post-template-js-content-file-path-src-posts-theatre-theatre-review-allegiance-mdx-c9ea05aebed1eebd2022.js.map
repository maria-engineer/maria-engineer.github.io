{"version":3,"file":"component---src-templates-blog-post-template-js-content-file-path-src-posts-theatre-theatre-review-allegiance-mdx-c9ea05aebed1eebd2022.js","mappings":"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","sources":["webpack://maria-dot-engineer/./src/posts/theatre/theatre_review_allegiance.mdx","webpack://maria-dot-engineer/./src/templates/blogPostTemplate.js","webpack://maria-dot-engineer/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"This musical was nothing short of brilliant. The only thing I could possibly find bad about it is that they did not sell out. I don't really understand how that could happen.\"), \"\\n\", React.createElement(_components.p, null, \"The show was perfect in what it was trying to achieve. Changing anything would make it into a completely different show. Could it have been more serious? Of course, but it would become something else, and if you ask me, not as good.\"), \"\\n\", React.createElement(_components.h3, null, \"Set Design and Direction\"), \"\\n\", React.createElement(_components.p, null, \"Speaking specifically about this particular production, the Charing Cross theatre is interesting as it has the audience split by the stage into two opposite auditoriums. This raises a few interesting challenges in both the set design and overall direction of the actors in order to make use of the audience. Both the usage of the set and the way that it was clearly well placed for both parts of the audience was amazing. In the direction, there was one scene that was beyond brilliant, and that is the Hiroshima scene. While it did not seem to last longer than a minute or two, it was both elegant and powerful.\"), \"\\n\", React.createElement(_components.h3, null, \"Music\"), \"\\n\", React.createElement(_components.p, null, \"The music was amazing throughout. Someone else with more knowledge about music could tell you more about why, but I will just settle on that. Also, it's almost a month later, and I still haven't fully gotten Paradise (one of the pieces) out of my head.\"), \"\\n\", React.createElement(_components.h3, null, \"Acting\"), \"\\n\", React.createElement(_components.p, null, \"The acting was really good throughout. The character you're supposed to hate is definitely impossible to find in any way pleasant. And the rest of the characters bring their roles to life in a very touching manner. If there is a point where the acting is not \\\"immersive,\\\" it is entirely intentional and an homage to the old Star Trek days.\"), \"\\n\", React.createElement(_components.h3, null, \"Story\"), \"\\n\", React.createElement(_components.p, null, \"The story in itself is something more niche, not that it should be, quite the opposite. I had first found out about the Japanese internment camps at an exhibition at the Met in New York entirely by chance. Even then, I did not find out too much about it. It is a story that needs to be told. This is likely a lot more important to George Takei as he grew up in those camps as a child. It's a story that the US really doesn't like talking about, yet its importance both to the community and history as a whole is monumental.\"), \"\\n\", React.createElement(_components.p, null, \"For me, what makes this such a great story is that while the ending is not great, and some characters are more likable than others, they all (except the American soldier, he sucks) do the right thing. For each of them, it's something different. And the conflicts that ensue from that conflict of values are what makes the story stand on its feet.\"), \"\\n\", React.createElement(_components.h3, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"All around, a great musical I would recommend to anyone. I have mad respect for George Takei for still doing this at 85 years old.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/mariamateescu/maria-engineer.github.io/src/posts/theatre/theatre_review_allegiance.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport styled from \"@emotion/styled\";\nconst Title = (styled.h1)`\n  text-align: right important!;\n`;\nfunction Template({data, children}) {\n  const {mdx} = data;\n  const {frontmatter} = mdx;\n  if (frontmatter.category === \"food\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Food\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title,\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(\"div\", {\n      className: \" content\"\n    }, React.createElement(Title, null, frontmatter.title), children));\n  }\n  if (frontmatter.category === \"theatre\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Theatre Reviews\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title + \" - Theatre Review\",\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(\"div\", {\n      className: \"content\"\n    }, React.createElement(\"h1\", null, frontmatter.title), children), React.createElement(\"footer\", {\n      className: \"footer go-center\"\n    }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(\"div\", {\n      className: \"lcars-bar-slice-bottom\"\n    })));\n  }\n  return React.createElement(Layout, {\n    currentPage: \"Maria Mateescu\",\n    currentSubPage: frontmatter.category === \"personal\" ? \"Personal Log\" : \"Engineering Log\"\n  }, React.createElement(SEO, {\n    title: frontmatter.title,\n    keywords: frontmatter.keywords,\n    description: frontmatter.description\n  }), React.createElement(\"div\", {\n    className: \"content\"\n  }, React.createElement(\"h1\", null, frontmatter.title), children), React.createElement(\"footer\", {\n    className: \"footer go-center\"\n  }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(\"div\", {\n    className: \"lcars-bar-slice-bottom\"\n  })));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Template, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        short\n        category\n        description\n        keywords\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h3","_provideComponents","components","React","wrapper","MDXLayout","Title","_styled","target","name","styles","Template","_ref","data","children","mdx","frontmatter","category","Layout","currentPage","currentSubPage","SEO","title","keywords","description","className","date","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}