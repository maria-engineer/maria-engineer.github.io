{"version":3,"file":"component---src-templates-blog-post-template-js-content-file-path-src-posts-personal-blog-pantomime-trap-mdx-0b1e935d0b37bf00d6b8.js","mappings":"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","sources":["webpack://maria-dot-engineer/./src/posts/personal/blog_pantomime_trap.mdx","webpack://maria-dot-engineer/./src/templates/blogPostTemplate.js","webpack://maria-dot-engineer/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I have this crazy hypothesis: children who engage in pantomimes become better communicators. As such I hypothesise countries where pantomimes(and similar art forms) are more common, have people that communicate more clearly.\"), \"\\n\", React.createElement(_components.h2, null, \"What am I referring to as better communication?\"), \"\\n\", React.createElement(_components.p, null, \"Different people and different cultures have somewhat different definitions as to what good communication is. Context based communication, when done right can be very effective when done right, yet does not translate well in international communities. This in of itself is a fascinating subject, and Erin Meyer explains it best in her book, \", React.createElement(_components.a, {\n    href: \"https://www.goodreads.com/book/show/22085568-the-culture-map\"\n  }, \"The Culture Map\"), \". As an expat who has worked primarily in international tech companies low context communication has generally been the winner.\"), \"\\n\", React.createElement(_components.h2, null, \"The psychology behind the pantomime\"), \"\\n\", React.createElement(_components.p, null, \"Developmentally children grow up thinking that their world view is the world view. That if they know something everyone else must know something. Especially the adults. This attitude pops up in pantomimes where the children shout at the stage \\\"He's behind you!\\\". There is both frustration that they don't realise something so obvious to them, and a moment of realisation that what is obvious to them may not be obvious to someone else. As we grow up we hopefully begin to realise that adults don't necessarily know everything we do and more. We begin to realise that our point of view is just one angle from which we look at things.\"), \"\\n\", React.createElement(_components.p, null, \"What I think pantomimes ultimately teach children is that what is blindingly obvious to them, is not to the character on stage. And their lack of understanding of why it is not, gets resolved when they bring it up to the main character, thus relieving the frustration. They learn to channel the frustration of someone not getting what is obvious to them into the action of saying something about it.\"), \"\\n\", React.createElement(_components.h2, null, \"The Pantomime Trap, Self-censoring and Impostor syndrome\"), \"\\n\", React.createElement(_components.p, null, \"Now, as grown-ups we stop shouting \\\"It's behind you!\\\" in frustration, because it's simply not done. But I have often found the same frustration to be a driving force in bad communication. Ultimately we go into the conversation thinking that if something is blindingly obvious to us, it must be blindingly obvious to the other person. And we assume that they have the same background, but then grow frustrated as the conversation derails as people end up missing the context the conversation is based on. We may even end up thinking \\\"are they being intentionally dense?\\\"...\"), \"\\n\", React.createElement(_components.p, null, \"This frustration with missed context is only compounded by our tendency to self-censor. Impostor syndrome is a common culprit - when we see our own ideas as inferior, we assume others have already thought of them. Thoughts like \\\"This is too simple, it must be stupid\\\" or \\\"they probably already thought of this, and it didn't work\\\" lead us to censor potentially valuable perspectives.\"), \"\\n\", React.createElement(_components.p, null, \"The same self-doubt crops up when we're listening too. Despite feeling lost, we refrain from asking \\\"simple\\\" clarifying questions out of fear of looking unintelligent. But universally understood ideas are rarer than we think. What's obvious to us is not obvious to all. And this is often something lost on presenters. And great ideas are often not listened to because of this.\"), \"\\n\", React.createElement(_components.h2, null, \"Escape the pantomime trap and join in the \\\"shouting\\\"\"), \"\\n\", React.createElement(_components.p, null, \"Just as we must shout out what seems blatantly evident in a pantomime, it is often useful to voice not-yet-perfect thoughts and ask na√Øve-sounding questions at work. This openness circumvents assumptions and allows us to align contexts. Thus opening the door to collaboration\"), \"\\n\", React.createElement(_components.p, null, \"As part of the audience it is not always possible to ask questions, but sometimes in smaller lecture halls, or smaller conference room presentations, it is actively encouraged. If I find myself I'm confused about something or another I will ask. My pet peeve is acronyms. Especially since they are sometimes overloaded. A quick clarification of \\\"just to double-check, by X we're referring specifically to this\\\", can save a lot of confusion. Especially in smaller contexts like team presentations it can often feel embarrassing to ask about something, because it feels like there's an expectation that we knew it already.\"), \"\\n\", React.createElement(_components.p, null, \"Now if you just started in a team maybe a lot of the questions may sound stupid. And a lot of the things you are asking everyone did already know about. So sometimes messaging the video call chat for acronym definitions or looking in the company dictionary first could make one feel better about these things. But sometimes there are no easy to find answers. So ask. And jot those answers down for the next person who joins the team. I think it is important to foster an environment to let new joiners ask the stupid questions, because every once in a while the \\\"stupid question\\\" is actually an insight based on a very diverse experience. And there is no shame in admitting \\\"Well, actually I never thought of that\\\". In fact those are the best questions.\"), \"\\n\", React.createElement(_components.p, null, \"As a presenter I've most appreciated it when somebody has stopped me for further clarification in the middle of a presentation. It was what I considered a basic concept, but had they not stopped me they would have probably misunderstood half my presentation. But I did see that as something I needed to improve in the future about my presentation. I will likely never have the same background as the people I am giving the presentation to. Therefore, I can rarely assume that shared background when giving it. If I am giving a presentation to my team, with whom I've worked with for a while, I can assume a little more. But it doesn't take much time to set some basic definitions and set the frame of reference.\"), \"\\n\", React.createElement(_components.p, null, \"Something I find myself very guilty of in a lot of explanations however is skipping steps. Sometimes because the connection is so obvious to me, I will skip straight to the conclusion leaving the other people in confusion as to how I got there. My high school Maths teacher struggled the most with me over this one.\"), \"\\n\", React.createElement(_components.h2, null, \"So why do pantomimes help?\"), \"\\n\", React.createElement(_components.p, null, \"I'd like to think they make it more fun and less stressful to conceptualise this difference in context. As somebody who discovered pantomimes as an adult I realised the comfort of joining in, as well as the way it rewired a lot of the way I related to social interactions as a whole.\"), \"\\n\", React.createElement(_components.h2, null, \"Fallacies\"), \"\\n\", React.createElement(_components.p, null, \"Pantomimes do encourage a bit more heckling, than would probably be best in a work scenario. Maybe don't actually start shouting \\\"Oh, yes it is!\\\" to your colleagues when you disagree. It's not actually productive. The key is respectful communication. If something doesn't make sense ask with curiosity. Asking respectfully with the goal to understand can lead to a lot of great conversations, and amazing problem-solving. But sometimes the questions may not come from curiosity or desire to understand, and then they can become aggressive, or disruptive to the flow of conversation. It's easy to weaponise these questions to interrupt or try to make one's point across. I, too, may have unintentionally done that a couple of times and I still feel bad about it.\"), \"\\n\", React.createElement(_components.h2, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"\\\"It's behind you!\\\" is a great reminder to me that I need to make communication as clear as I possibly can, and even then I will probably assume shared definitions that I probably don't actually share with my audience, be that audience one person or a whole auditorium. This is something I failed to learn growing up and only as an adult I have really discovered and is constantly at the top of my mind.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/mariamateescu/maria-engineer.github.io/src/posts/personal/blog_pantomime_trap.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport styled from \"@emotion/styled\";\nconst Title = (styled.h1)`\n  text-align: right important!;\n`;\nfunction Template({data, children}) {\n  const {mdx} = data;\n  const {frontmatter} = mdx;\n  if (frontmatter.category === \"food\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Food\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title,\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(\"div\", {\n      className: \" content\"\n    }, React.createElement(Title, null, frontmatter.title), children));\n  }\n  if (frontmatter.category === \"theatre\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Theatre Reviews\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title + \" - Theatre Review\",\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(\"div\", {\n      className: \"content\"\n    }, React.createElement(\"h1\", null, frontmatter.title), children), React.createElement(\"footer\", {\n      className: \"footer go-center\"\n    }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(\"div\", {\n      className: \"lcars-bar-slice-bottom\"\n    })));\n  }\n  return React.createElement(Layout, {\n    currentPage: \"Maria Mateescu\",\n    currentSubPage: frontmatter.category === \"personal\" ? \"Personal Log\" : \"Engineering Log\"\n  }, React.createElement(SEO, {\n    title: frontmatter.title,\n    keywords: frontmatter.keywords,\n    description: frontmatter.description\n  }), React.createElement(\"div\", {\n    className: \"content\"\n  }, React.createElement(\"h1\", null, frontmatter.title), React.createElement(MDXProvider, null, children)), React.createElement(\"footer\", {\n    className: \"footer go-center\"\n  }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(\"div\", {\n    className: \"lcars-bar-slice-bottom\"\n  })));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Template, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        short\n        category\n        description\n        keywords\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it‚Äôs no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it‚Äôs no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","a","_provideComponents","components","React","href","wrapper","MDXLayout","Title","_styled","target","name","styles","Template","_ref","data","children","mdx","frontmatter","category","Layout","currentPage","currentSubPage","SEO","title","keywords","description","className","date","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}