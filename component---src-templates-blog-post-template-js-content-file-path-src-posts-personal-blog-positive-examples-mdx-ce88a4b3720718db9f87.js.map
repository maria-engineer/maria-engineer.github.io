{"version":3,"file":"component---src-templates-blog-post-template-js-content-file-path-src-posts-personal-blog-positive-examples-mdx-ce88a4b3720718db9f87.js","mappings":"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","sources":["webpack://maria-dot-engineer/./src/posts/personal/blog_positive_examples.mdx","webpack://maria-dot-engineer/./src/templates/blogPostTemplate.js","webpack://maria-dot-engineer/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport Footnote from \"../../components/footnote\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    em: \"em\",\n    a: \"a\",\n    hr: \"hr\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"My undergraduate thesis was \\\"Learning Regular Expressions\", React.createElement(Footnote, {\n    presentation: \"0\"\n  }, \"Regular expressions are a representation of a pattern that in computer science we can use to see if one thing is part of the pattern or not. They can also be used to produce more results in the same pattern.\"), \" from Positive Examples\\\". For example, say we have the following examples \", React.createElement(_components.code, null, \"a, aa, aaa, aaaa\"), \" a human may deduce that the regular expression is \", React.createElement(_components.code, null, \"a+\"), \", in English it means the letter \", React.createElement(_components.code, null, \"a\"), \" repeated multiple times. Task: How could we get computers to reach the same conclusion? Especially when even people may reach a different conclusion. One such alternative answer is: any letter repeated multiple times. The conclusion of my thesis was that it cannot be done. More specifically it can, but only if you introduce restrictions, because if you don't \", React.createElement(_components.code, null, \".*\"), \", which is the regular expression for \\\"everything is permitted\\\", will always work, and will always be the shortest and simplest answer. If we introduce restrictions on how the expression looks like, we can come up with something better, or at least closer to what a human would, but the restriction in itself is a negative example.\"), \"\\n\", React.createElement(_components.p, null, \"We humans are fairly good at inferring context. Which is why there is an acknowledgement in \\\"Artificial Intelligence\\\" research that while humans may find it easy to figure out the rule to a sequence of numbers from a fairly small sample set, computers cannot. At the same time, there may not be one singular answer either, and computers are not known to deal well with ambiguity.\"), \"\\n\", React.createElement(_components.p, null, \"So let's look at inferring sequences. For \", React.createElement(_components.code, null, \"1,1,2,3,5,8\"), \" there is one obvious answer. It's the Fibonacci sequence, right? We know the next number is \", React.createElement(_components.code, null, \"13\"), \". And here is where context comes in. As humans, we are good at extrapolating information. Which is usually useful. However, sometimes we can make the wrong assumptions, and end up with some pretty unfortunate fallacies\", React.createElement(Footnote, {\n    presentation: \"1\"\n  }, \"Confusing correlation with causation is one of my favourites here\"), \". But this example in itself is not without negative examples. The fact that the sequence is in increasing order, by virtue of extrapolation, we give ourselves the following negative examples \", React.createElement(_components.code, null, \"4,6,7\"), \", we know these are not in the sequence. Similarly, in the regular expression example before, we imagine patterns and draw meaning from the examples that the author did not include. However, when the regular expression can generate an infinite number of results, can we even make the assumption, really that the not mentioned examples are in fact negatives? We may have just not gotten around to them.\"), \"\\n\", React.createElement(_components.p, null, \"While my thesis focused on computer science, the principle of needing both positive and negative examples extends far beyond algorithms, and it took me quite a while to fully understand that myself.\"), \"\\n\", React.createElement(_components.h2, null, \"The real lesson\"), \"\\n\", React.createElement(_components.p, null, \"I'm not writing a blog post here to summarise my mediocre undergraduate research. What I am writing about is what it took me 7 years to realise the applications of this conclusion to real life. It struck me as I was doing a coaching course. What I like about this course is that it threw us in to practice from the first session. With the simple instruction of \\\"Just listen\\\". Now as you can imagine some people are not too comfortable with that, both ways really. It requires some comfort to just talk for 5 minutes without wondering what the other person is thinking and wanting to check in with them. Because if they're not saying anything, are they actually listening? So we made the mistake of not just listening, and that was when I realised why the instruction was \\\"just listening\\\". Thing is, it was only in doing it the wrong way that, at least, I realised why the \\\"right\\\" way is the right way.\"), \"\\n\", React.createElement(_components.p, null, \"Just like computers, we cannot learn without making mistakes. Sometimes we get lucky, and we can learn from someone else's mistake, but that in itself is rare. Making the mistake, we can notice our own thought pattern that lead to it. We can figure out the difference in the thinking and behaviours between the mistake and the correct behaviour. It's particularly tricky when the desired behaviour and the mistake are very similar, especially externally. And we can easily excuse it as a difference between intent and impact, when we don't really want to deal with our own behaviours.\"), \"\\n\", React.createElement(_components.h2, null, \"Boldly make mistakes\"), \"\\n\", React.createElement(_components.p, null, \"Imagine trying to learn a new skill, say cooking by watching a perfectly executed dish done by a Michelin starred chef. Safe to say it will be very unlikely that you will be able to replicate the dish. Without seeing common mistakes or understanding why certain techniques are used, the learning would be incomplete. Unexpected events happen in life at all stages, and if we don't fully understand both successes and failures we may not have the tools to recover from the draw backs life inevitably throws at us. We won't have mastered the skill, or maybe even learned it. But we can repeat it back, as long as everything goes perfectly. But when does it ever?\"), \"\\n\", React.createElement(_components.p, null, \"Growing up mistakes were severely punished. The philosophy behind that, if one could say there was one, was that only if the mistakes are punished will I learn from them. I will tell you now, that is absolute bullshit, there is plenty developmental and sociological research nowadays that backs it. \", React.createElement(\"a\", {\n    href: \"https://www.goodreads.com/book/show/28815.Influence\",\n    target: \"_blank\"\n  }, \"Robert Cialdini's Influence\"), \" is a good resource here referencing a variety of different studies. Ultimately punishing mistakes or certain behaviours does make people unlikely to do them under supervision. However, they learn to avoid the punishment, but not learn from the mistake itself. If you are interested in more books on how it can affect the developing brain, books like \", React.createElement(\"a\", {\n    href: \"https://www.goodreads.com/book/show/20556323-complex-ptsd\",\n    target: \"_blank\"\n  }, \"Pete Walker's Complex PTSD: From Surviving to Thriving\"), \", or \", React.createElement(\"a\", {\n    href: \"https://www.goodreads.com/book/show/23129659-adult-children-of-emotionally-immature-parents\",\n    target: \"_blank\"\n  }, \"Lindsay Gibson's Adult Children of Emotionally Immature Parents\"), \" are some favourites of mine.\"), \"\\n\", React.createElement(_components.p, null, \"However, that is not how I felt for a very long time. I internalised the message that all mistakes are bad, to the point where even a harmless mistake, like dropping a glass and shattering it would lead to a panic attack. I turned to perfectionism as a coping mechanism and that prevented me from learning from my mistakes. And just learned to avoid them. Eventually there were points where I ended up paralysed unable to make a decision, because I didn't want to make a mistake. There were a couple of times, where it made me unable to take responsibility for my mistakes, because accepting it as a mistake would, based on my experience throughout my developmental years have ended up in disaster. This has changed over time, but I'm a long way from done.\"), \"\\n\", React.createElement(_components.p, null, \"Being in the environment of this coaching course, which is one of the first places where I have felt 100% safe to make mistakes, things have worked out a bit differently. That is not to say I have never learned from my mistakes before, but it always felt difficult, and regrettable that I had made the mistake in the first place. Whereas here I was happy to have made the mistake. I was happy the mistake happened to me. I learned why there is a \\\"no interruption\\\" rule, not just the rule. A learning environment is difficult to achieve. The coaching course has the benefit of being a course, so it's easier, but if we take a workplace for example, or real life, it seems like a much harder feat. After all mistakes in real life have real consequences.\"), \"\\n\", React.createElement(_components.p, null, \"And yes, there will be areas where mistakes are not acceptable, like a surgery. Nick the wrong artery and the patient dies because of blood loss. Once the patient is dead, not much one can do to fix the mistake. It's why surgeons practice on cadavers and a myriad of other teaching tools, so they can make mistakes when it doesn't matter.\"), \"\\n\", React.createElement(_components.p, null, \"In a lot of other industries mistakes are often not life-threatening, and there can be guardrails put in place to allow undoing or fixing mistakes with relative ease. Sure a social media platform may lose a lot of money if its services went down for half an hour, but nobody is going to die if they can't see the latest viral cat video. I am lucky enough that software is not a \\\"do or die\\\" type of field. There are test environments, automated tests, alerting to catch mistakes and ways to roll back most times and iterate. With a bit of care, most code can be written in a way that it can be rolled back. The rest is all about people, and if we all treat each other with respect, accept that mistakes can be made and repair after we have made mistakes, then we can learn.\"), \"\\n\", React.createElement(_components.p, null, \"Some of the best feedback I have ever gotten was from making mistakes. Some of that feedback wasn't in an environment where it felt safe to make mistakes, and it took me years to internalise and deal with it. When it was safe, the feedback went much smoother, and I could act on it right away.\"), \"\\n\", React.createElement(_components.h2, null, \"Without mistakes, there's cargo culting\"), \"\\n\", React.createElement(_components.p, null, \"Learning a set of rules and following them blindly may lead to us not making mistakes, but do we actually learn? Learning is the process where we understand why things are the way they are and why we do certain things the way we do them. If we only follow a set of rules with the promise of an eventual result, basically nothing short of a \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Cargo_cult\",\n    target: \"_blank\"\n  }, \"cargo cult\"), \", can we actually guarantee the result we are seeking. The term got further popularised in the world of \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Cargo_cult_programming\"\n  }, \"software engineering\"), \". I have seen this in others and myself, where I seemed like I was doing the right things, but I had no idea why it didn't pay off. Yes, in one circumstance it had been the classic case of workplace sexism, but I can see that in a few others, while the behaviour seemed to be there, the underlying motivation and thinking wasn't, because I hadn't yet learned the skill.\"), \"\\n\", React.createElement(_components.p, null, \"It is easy to make things look like they are doing the right thing. And sometimes we can learn right off the bat how something is the right thing to do, but we often, if not always, need the contrast to learn why. We may otherwise always wonder how would it be if we took this tiny shortcut, after all, we are still following the rules, right? And then it doesn't work.\"), \"\\n\", React.createElement(_components.p, null, \"Take my learning from the coaching course. I always thought that active listening was about asking probing questions to get more information, and make sure it sounds like you're listening. I followed the rules and did not ask anything, gathering all the questions I wanted to ask in my mind, not asking them because of the rules. But still thought internally they would have been good questions to ask, and the conversation may have gone better had I asked them. Nonetheless, I followed the rules. I am, after all, a rule follower. Then came the mistakes. It was only then that I realised why the questions were bad. They were not there for the benefit of the person talking, they were there to satisfy my own curiosity. Yes, it was a form of listening, but it wasn't what the speaker (me in this particular mistake) wanted to talk about. Mind you it was an interesting conversation, and an interesting topic, but not the one I wanted to discuss. It was only in the mistake that I realised why I was not supposed to ask questions. But never asking questions, or just asking the same generic \\\"Can you think of anything else?\\\" that even a simple LLM can do, is not the actual point. Questions are fine, but they should be for the benefit of the speaker, and the listener should try to continue the focus that the speaker was choosing.\"), \"\\n\", React.createElement(_components.h2, null, \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Just as I concluded in my thesis that computers can't learn regular expressions from only positive examples, I realised that we, as humans, can't fully learn life skills without experiencing or observing mistakes. Mistakes happen, and treat them as a gift, because they do teach lessons no one else can. And it will only be mistakes that will prepare us to deal with the unexpected, and the unexpected always happens, otherwise we could just automate our lives away.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"Interested in learning more? Feel free to explore my coaching \", React.createElement(_components.a, {\n    href: \"/coaching/\"\n  }, \"here\"), \" and book a free intro call to discuss how I can help you.\")), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, React.createElement(\"sup\", null, \"0\"), \" Regular expressions are a representation of a pattern that in computer\\nscience we can use to see if one thing is part of the pattern or not. They can also\\nbe used to produce more results in the same pattern.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"sup\", null, \"1\"), \" Confusing correlation with causation is one of my favourites here\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/mariamateescu/maria-engineer.github.io/src/posts/personal/blog_positive_examples.mdx\";\nimport React from \"react\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport styled from \"@emotion/styled\";\nconst Title = (styled.h1)`\n  font-size: 3rem;\n  @media (max-width: 420px) {\n    min-font-size: 24px;\n  }\n  font-family: \"Poppins\", \"Arial Narrow\", sans-serif;\n  text-rendering: optimizelegibility;\n  font-weight: 400;\n  text-align: left;\n  color: #38f;\n`;\nconst Post = (styled.div)`\n  padding: 10px 60px 10px 60px;\n  @media (max-width: 420px) {\n    padding: 10px 10px 10px 10px;\n  }\n  font-family: \"Poppins\", \"Arial Narrow\", sans-serif;\n  text-rendering: optimizelegibility;\n  font-weight: 200;\n  font-style: normal;\n`;\nconst Bar = (styled.div)`\n  margin: 5px auto 20px auto;\n  height: 10px;\n  background: #38f;\n  border-right: 18px solid #8bf;\n  border-left: 18px solid #8bf;\n  border-radius: 9px;\n  padding: 0 5px;\n  width: 60%;\n`;\nfunction Template({data, children}) {\n  const {mdx} = data;\n  const {frontmatter} = mdx;\n  if (frontmatter.category === \"food\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Food\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title,\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(Post, null, React.createElement(Title, null, frontmatter.title), React.createElement(MDXProvider, null, children)));\n  }\n  if (frontmatter.category === \"theatre\") {\n    return React.createElement(Layout, {\n      currentPage: \"Interests\",\n      currentSubPage: \"Theatre Reviews\"\n    }, React.createElement(SEO, {\n      title: frontmatter.title + \" - Review\",\n      keywords: frontmatter.keywords,\n      description: frontmatter.description\n    }), React.createElement(Post, null, React.createElement(Title, null, frontmatter.title), React.createElement(MDXProvider, null, children)), React.createElement(\"div\", {\n      className: \"footer go-center\"\n    }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(Bar)));\n  }\n  return React.createElement(Layout, {\n    currentPage: \"Maria Mateescu\",\n    currentSubPage: frontmatter.category === \"personal\" ? \"Personal Log\" : \"Engineering Log\"\n  }, React.createElement(SEO, {\n    title: frontmatter.title,\n    keywords: frontmatter.keywords,\n    description: frontmatter.description\n  }), React.createElement(Post, null, React.createElement(Title, null, frontmatter.title), React.createElement(MDXProvider, null, children)), React.createElement(\"div\", {\n    className: \"footer go-center\"\n  }, React.createElement(\"div\", null, \"---\", frontmatter.date, \"---\"), React.createElement(Bar)));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Template, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        short\n        category\n        description\n        keywords\n      }\n    }\n  }\n`;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h2","em","a","hr","_provideComponents","components","React","Footnote","presentation","href","target","wrapper","MDXLayout","Title","_styled","name","styles","Post","Bar","Template","_ref","data","children","mdx","frontmatter","category","Layout","currentPage","currentSubPage","SEO","title","keywords","description","MDXProvider","className","date","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}