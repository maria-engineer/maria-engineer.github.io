{"version":3,"file":"component---src-posts-theatre-theatre-review-lemonslemonslemons-mdx-cd0556c3387a7beab37e.js","mappings":"6JAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,whBAAyhB,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,mdAAod,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,+vBAAgwB,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,uhBAAwhB,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,ijBAAkjB,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,2NAC9nG,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,sECqBO,MAAMU,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBL,GAC/B,MAAMM,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfJ,EACFA,EAAWM,GAGb,IAAIA,KAAsBN,IAChC,CAACM,EAAmBN,GACzB,C","sources":["webpack://maria-dot-engineer/./src/posts/theatre/theatre_review_lemonslemonslemons.mdx","webpack://maria-dot-engineer/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"This play has likely been one of the most disappointing plays I have seen in a very long time. That is not to say that it is, in fact, a bad play. It was just very disappointing. The production is impressive. The set itself, while intricate and very well done, screams high budget without the need for it. It is generally a two-person play that ultimately only needs an empty stage and two different colors of lighting to have all the effect it needs. I know that to be the case because they did not make use of it in any other way.\"), \"\\n\", React.createElement(_components.p, null, \"To understand the disappointment, I reckon a short summary of the play's premise is necessary. And don't get me wrong, the premise is brilliant. What the author brings into the play is this idea that we are in a world where only 140 words are allowed to be spoken per day (hello Twitter reference). One can already start thinking about discussions that already existed in the world around Twitter as to how can anyone even say anything meaningful in so few words.\"), \"\\n\", React.createElement(_components.p, null, \"The disappointment for me is just how little they did with the premise in this play, however. The advertising itself leans in a lot into the conundrum that arises as to how we split our words between work and family. I was truly excited for that conversation. To draw a parallel to our daily lives, the number of words could be a countable way to define our energy spend. And this was a topic that was so ripe for discussion, especially with this premise. And then the play did not deliver. The play briefly touches on being left without any words at the end of the day, but with the exception of the scene where the play title comes from, there is no conflict, nor conversation between how the characters choose to prioritize their word spend between each other.\"), \"\\n\", React.createElement(_components.p, null, \"The play focuses a lot on the governmental and free speech implications of this policy, looking at whom the word limit would affect more, and whom it would disadvantage. The discussion around word count free areas, like courthouses, and the houses of parliament, further proving that point. This, in itself, is a brilliant point and an interesting play in itself, but it doesn't feel like what was promised. Not only that but the choice of having this be a two-person play undermines the ability to deliver the message as strongly.\"), \"\\n\", React.createElement(_components.p, null, \"In order to create this conflict and be able to tell this clash of ideals and political turmoil, the characters themselves need to be in conflict in their very being, making their relationship ultimately unrealistic. The setup, in itself, is better if they were to clash over challenges in their relationship. While this clash in ideals does create relationship conflict, it does not play to the strengths of the premise, nor the limits in which the play was written. The political discussion may have hit harder and better with a bigger, more diverse cast.\"), \"\\n\", React.createElement(_components.p, null, \"So, while the premise, in itself, is brilliant, and the topics brought up are interesting and worth presenting in a play, the play under-delivers on all fronts. I cannot call it anything other than a disappointment.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}